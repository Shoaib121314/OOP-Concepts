//1: Class
    class Person {

//2: Encapsulation - private attributes
    private String name;
    private int age;

//3: Constructor
    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

//4: Method
    public void introduce() {
        System.out.println("Hi, I'm " + name + " and I'm " + age + " years old.");
    }
    }

//5: Inheritance - Employee class is a subclass of Person
     class Employee extends Person {
//2: Encapsulation - additional private attribute
    private String employeeId;

//3: Constructor with super() to call the superclass constructor
    public Employee(String name, int age, String employeeId) {
        super(name, age);
        this.employeeId = employeeId;
    }

//6: Method Overriding
    @Override
    public void introduce() {
        System.out.println("Hi, I'm " + getName() + ", an employee with ID " + employeeId + ".");
    }
    }

    public class OOPExample {
    public static void main(String[] args) {
//7: Object - Creating objects of Person and Employee classes
        Person person1 = new Person("Alice", 25);
        Person person2 = new Person("Bob", 30);

//8: Polymorphism - Using the introduce method on objects of different types
        person1.introduce();
        person2.introduce();

//7: Object - Creating an Employee object
        Employee employee1 = new Employee("Charlie", 28, "E123");

//8: Polymorphism - Using the overridden introduce method
        employee1.introduce();
    }
}
